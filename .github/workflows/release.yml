name: Release

on:
  pull_request:
    types:
      - closed

jobs:
  release-on-merge:
    if: github.event.pull_request.merged == true
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0 # needed for full git history

      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: "20"

      - name: Get current version
        id: current
        run: |
          echo "version=$(jq -r .version package.json)" >> $GITHUB_OUTPUT

      - name: Get previous version from base commit
        id: previous
        run: |
          git fetch origin ${{ github.event.pull_request.base.sha }}
          git show ${{ github.event.pull_request.base.sha }}:package.json > old-package.json
          echo "version=$(jq -r .version old-package.json)" >> $GITHUB_OUTPUT

      - name: Get dependency versions
        id: depcheck
        run: |
          # Extract old and new dependency versions
          git show ${{ github.event.pull_request.base.sha }}:package.json > old-package.json
          OLD_DEP=$(jq -r '.dependencies["@playwright/experimental-ct-core"]' old-package.json)
          NEW_DEP=$(jq -r '.dependencies["@playwright/experimental-ct-core"]' package.json)

          echo "old_dep=$OLD_DEP" >> $GITHUB_OUTPUT
          echo "new_dep=$NEW_DEP" >> $GITHUB_OUTPUT

          # Strip ^ or ~
          OLD_CLEAN=$(echo $OLD_DEP | sed 's/^[^0-9]*//')
          NEW_CLEAN=$(echo $NEW_DEP | sed 's/^[^0-9]*//')

          if [ "$OLD_CLEAN" != "$NEW_CLEAN" ]; then
            echo "Dependency version changed from $OLD_CLEAN to $NEW_CLEAN"
            echo "dep_changed=true" >> $GITHUB_OUTPUT
            echo "new_version=$NEW_CLEAN" >> $GITHUB_OUTPUT
          else
            echo "dep_changed=false" >> $GITHUB_OUTPUT
          fi

      - name: Sync root version with dependency version
        if: steps.depcheck.outputs.dep_changed == 'true'
        env:
          GH_TOKEN: ${{ github.token }}
        run: |
          git config user.name "sand4rt"
          git config user.email "sander@webphy.com"
          git remote set-url origin https://x-access-token:${{ secrets.GH_PAT }}@github.com/${{ github.repository }}

          BRANCH="sync-version-${{ steps.depcheck.outputs.new_version }}-$(date +%s)"
          git checkout -b $BRANCH
          npm version ${{ steps.depcheck.outputs.new_version }} --no-git-tag-version
          git add .
          git commit -m "chore: sync root version to match @playwright/experimental-ct-core@${{ steps.depcheck.outputs.new_version }}"

          git push origin $BRANCH

          PR_URL=$(gh pr create \
            --title "chore: sync root version to match @playwright/experimental-ct-core@${{ steps.depcheck.outputs.new_version }}" \
            --body "Automated PR to sync @playwright/experimental-ct-core dependency." \
            --base main \
            --head $BRANCH)

          echo "PR created at $PR_URL"

          gh pr merge "$PR_URL" --merge --auto

      - name: Re-check current version after sync
        if: steps.depcheck.outputs.dep_changed == 'true'
        id: current_updated
        run: |
          echo "version=$(jq -r .version package.json)" >> $GITHUB_OUTPUT

      - name: Compare versions for release
        id: compare
        run: |
          CUR="${{ steps.current_updated.outputs.version || steps.current.outputs.version }}"
          PREV="${{ steps.previous.outputs.version }}"
          echo "current=$CUR"
          echo "previous=$PREV"
          if [ "$CUR" != "$PREV" ]; then
            echo "release_needed=true" >> $GITHUB_OUTPUT
            echo "version=$CUR" >> $GITHUB_OUTPUT
          else
            echo "release_needed=false" >> $GITHUB_OUTPUT
          fi

      - name: Create GitHub Release
        if: steps.compare.outputs.release_needed == 'true'
        uses: ncipollo/release-action@v1
        with:
          tag: v${{ steps.compare.outputs.version }}
          name: v${{ steps.compare.outputs.version }}
          body: |
            Automated release for version v${{ steps.compare.outputs.version }}.
          token: ${{ secrets.GH_PAT }}
          generateReleaseNotes: true
